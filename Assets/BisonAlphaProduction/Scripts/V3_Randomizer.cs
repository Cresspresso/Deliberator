using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.SceneManagement;

/// <summary>
///		<para>
///			Provides lifetime semantics so that if a different scene is loaded, 
///			a new value is generated for each instance of this component,
///			but if the same scene is restarted by <see cref="V3_SparGameObject.RestartCurrentScene"/>,
///			the previous generated value is reused.
///		</para>
///		<para>Usage:</para>
///		<list type="number">
///			<item>Make a new script inherit from <see cref="V3_SparRandomizerDatabase{TValue}"/>.</item>
///			<item>Make another new script inherit from this class <see cref="V3_Randomizer{TValue, TSparRandomizerDatabase}"/>.</item>
///			<item>Override the <see cref="Generate()"/> method.</item>
///		</list>
///		<para>See also:</para>
///		<para><see cref="V3_SparRandomizerDatabase{TValue}"/></para>
///		<para><see cref="V3_SparGameObject"/></para>
///		<para><see cref="V3_FingerprintNumpadRandomizer"/></para>
/// </summary>
/// <typeparam name="TValue">
///		Type of generated value which should be preserved in <typeparamref name="TSparRandomizerDatabase"/>.
/// </typeparam>
/// <typeparam name="TSparRandomizerDatabase">
///		Concrete class inheriting <see cref="V3_SparRandomizerDatabase{TValue}"/>
///		with same type parameter <typeparamref name="TValue"/> as this class.
///	</typeparam>
/// 
/// <changelog>
///		<log author="Elijah Shadbolt" date="11/08/2020">
///			<para>Detailed comments.</para>
///		</log>
/// </changelog>
/// 
public abstract class V3_Randomizer<TValue, TSparRandomizerDatabase> : MonoBehaviour
	where TSparRandomizerDatabase : V3_SparRandomizerDatabase<TValue>
{
	/// <summary>
	///		<para>If <see langword="false"/>, <see cref="m_generatorID"/> will need to be set manually in the inspector.</para>
	///		<para>
	///			If <see langword="true"/>, the <see cref="generatorID"/> will be generated
	///			by flooring the square magnitude of this script's <see cref="Transform.position"/>.
	///		</para>
	///		<para>
	///			The ID generation is not guaranteed to work in all cases.
	///			The algorithm will fail to produce unique IDs
	///			if two instances of any class inheriting from <see cref="V3_Randomizer{TValue, TSparRandomizerDatabase}"/>
	///			have a similar distance from the origin.
	///		</para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	[Tooltip("If false, Generator ID will need to be set manually in the inspector."
		+ " If true, the Generator ID will be generated by flooring the square magnitude of this script's Transform.position."
		+ " The ID generation is not guaranteed to work in all cases."
		+ " The algorithm will fail to produce unique IDs if two instances of any class inheriting from V3_Randomizer have a similar distance from the origin.")]
	[SerializeField]
	private bool m_autoGenerateIDByPosition = true;



	/// <summary>
	///		<para>Backing field for <see cref="generatorID"/>.</para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	[Tooltip("A unique identifier to represent this object when the scene is restarted."
		+ " The IDs MUST be unique within each scene, regardless of different derived classes."
		+ " This is used as a key into a dictionary of generated values carried over from the restart.")]
	[SerializeField]
	private int m_generatorID = 0;



	/// <summary>
	///		<para>A unique identifier to represent this object when the scene is restarted.</para>
	///		<para>The IDs MUST be unique within each scene, regardless of different derived classes.</para>
	///		<para>This is used as a key into a dictionary of generated values carried over from the restart.</para>
	///		<para>See also:</para>
	///		<para><see cref="V3_SparRandomizerDatabase{TValue}"/></para>
	///		<para><see cref="m_autoGenerateIDByPosition"/></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	public int generatorID => m_generatorID;



	/// <summary>
	///		<para>Set of IDs of all instances in the scene.</para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	private HashSet<int> s_currentlyAlive = new HashSet<int>();



	/// <summary>
	///		<para>
	///			<see langword="true"/> if this script has successfully registered with its unique ID.
	///		</para>
	///		<para>
	///			<see langword="false"/> if this script is in an invalid state
	///			because it has a duplicate ID which a
	///			different instance has already registered.
	///		</para>
	///		<para>
	///			This property is populated in the <see cref="Awake"/> event.
	///		</para>
	///		<para>See also:</para>
	///		<para><see cref="generatorID"/></para>
	///		<para><see cref="generatedValue"/></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	public bool isAlive { get; private set; } = false;



	/// <summary>
	///		<para>The data that was generated or retrieved from the previous iteration.</para>
	///		<para>This data is preserved if the scene is restarted by calling <see cref="V3_SparGameObject.RestartCurrentScene"/>.</para>
	///		<para>This property is only populated when <see cref="isAlive"/> is set to <see langword="true"/> in the <see cref="Awake"/> event.</para>
	///		<para>See also:</para>
	///		<para><see cref="Generate"/></para>
	///		<para><see cref="isAlive"/></para>
	///		<para><see cref="generatorID"/></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	public TValue generatedValue { get; private set; }



	/// <summary>
	///		<para>Generates data specific to this script instance.</para>
	///		<para>This data is preserved if the scene is restarted by calling <see cref="V3_SparGameObject.RestartCurrentScene"/>.</para>
	///		<para>See also:</para>
	///		<para><see cref="generatedValue"/></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	protected abstract TValue Generate();



	/// <summary>
	///		<para>Unity Message Method: <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html"></a></para>
	///		<para>
	///			Populates the <see cref="generatedValue"/> property
	///			either by loading it from the previous iteration of the same scene,
	///			or generating a new value.
	///		</para>
	///		<para>
	///			If this virtual method is overridden, it must be called
	///			from the derived class like so:
	///		</para>
	///		<code>
	///			protected override void Awake()
	///			{
	///				base.Awake();
	///				/* ... use this.generatedValue ... */
	///			}
	///		</code>
	///		<para>See also:</para>
	///		<para><see cref="V3_FingerprintNumpadRandomizer.Awake"/></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Updated comments.</para>
	///		</log>
	/// </changelog>
	/// 
	protected virtual void Awake()
	{
		if (m_autoGenerateIDByPosition)
		{
			m_generatorID = Mathf.RoundToInt(transform.position.sqrMagnitude);
		}

		if (s_currentlyAlive.Contains(m_generatorID))
		{
			Debug.LogError("Randomizer with same ID already exists in the scene.", this);
		}
		else
		{
			isAlive = true;
			s_currentlyAlive.Add(m_generatorID);

			var database = V3_SparGameObject.FindOrCreateComponent<TSparRandomizerDatabase>();
			if (database.dictionary.TryGetValue(m_generatorID, out var value))
			{
				generatedValue = value;
			}
			else
			{
				generatedValue = Generate();
				database.dictionary.Add(m_generatorID, generatedValue);
			}
		}
	}



	/// <summary>
	///		<para>Unity Message Method: <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDestroy.html"></a></para>
	/// </summary>
	/// 
	/// <changelog>
	///		<log author="Elijah Shadbolt" date="11/08/2020">
	///			<para>Added comments.</para>
	///		</log>
	/// </changelog>
	/// 
	protected virtual void OnDestroy()
	{
		/// If we have registered...
		if (isAlive)
		{
			/// Unregister this script's ID.
			s_currentlyAlive.Remove(m_generatorID);
		}
	}
}
